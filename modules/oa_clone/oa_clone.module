<?php
/**
 * @file
 * Code for the Open Atrium Clone module.
 */

include_once 'oa_clone.features.inc';

/**
 * The path to the clone action.
 */
define('OA_CLONE_ACTION_PATH', 'node/%node/clone/%clone_token');

/**
 * The path to the 'Create Space' page.
 */
define('OA_CLONE_CREATE_SPACE_PATH', 'node/add/oa-space/%');

/**
 * Implements hook_menu_alter().
 */
function oa_clone_menu_alter(&$items) {
  if (isset($items[OA_CLONE_ACTION_PATH])) {
    // MENU_LOCAL_ACTION doesn't really fit in with Open Atrium's UI design,
    // it isn't used anywhere else. Instead we use tabs and contextual_tabs,
    // so let's switch this!
    $items[OA_CLONE_ACTION_PATH]['type'] = MENU_LOCAL_TASK;

    // We rebuild the node edit form using Panels, but by default the Clone
    // module won't use this. We replace it's page callback to fix that!
    $items[OA_CLONE_ACTION_PATH]['page callback'] = 'oa_clone_node_check';
  }

  if (isset($items[OA_CLONE_CREATE_SPACE_PATH])) {
    // We have to conditionally replace the normal 'Create Space' page
    // with one that can clone.
    $items[OA_CLONE_CREATE_SPACE_PATH]['page callback'] = 'oa_clone_create_space_page_callback';
  }
}

/**
 * Page callback that prompts the user to confirm the operation.
 *
 * This code was copied from clone_node_check() and simple changed to call
 * our oa_clone_node_prepopulate() rather than clone_node_prepopulate().
 *
 * @param object $node
 *   A node object representing the node we are cloning.
 *
 * @see clone_node_check()
 */
function oa_clone_node_check($node) {
  $method = variable_get('clone_method', 'prepopulate');

  switch ($method) {
    case 'save-edit':
      if (variable_get('clone_nodes_without_confirm', FALSE)) {
        $new_nid = clone_node_save($node->nid);
        $options = array();
        if (!empty($_GET['node-clone-destination'])) {
          $options['query']['destination'] = $_GET['node-clone-destination'];
        }
        drupal_goto('node/' . $new_nid . '/edit', $options);
      }
      else {
        return drupal_get_form('clone_node_confirm', $node);
      }
      break;
    case 'prepopulate':
    default:
      // Open Atrium: Here is our one change.
      return oa_clone_node_prepopulate($node);
      break;
  }
}

/**
 * Page callback that builds the Clone page with Panels.
 *
 * Essentially this is combining page_manager_node_add() with
 * clone_node_prepopulate() such that our customizations to the node edit form
 * via Panels are also on the node clone form.
 *
 * @param object $original_node
 *   A node object representing the node we are cloning.
 * @param boolean $set_title
 *   (Optional) Whether we should set the title or not; TRUE by default.
 *
 * @see page_manager_node_add()
 * @see clone_node_prepopulate()
 */
function oa_clone_node_prepopulate($original_node, $set_title = TRUE) {
  if (isset($original_node->nid)) {
    if (clone_is_permitted($original_node->type)) {
      // Include the file which defines _clone_node_prepare().
      module_load_include('inc', 'clone', 'clone.pages');

      $node = _clone_node_prepare($original_node, TRUE);
      if ($set_title) {
        drupal_set_title($node->title);
      }
      else {
        $node->title = '';
      }

      // Let other modules do special fixing up.
      $context = array('method' => 'prepopulate', 'original_node' => $original_node);
      drupal_alter('clone_node', $node, $context);
      // Make sure the file defining the node form is loaded.
      $form_state = array();
      $form_state['build_info']['args'] = array($node);

      form_load_include($form_state, 'inc', 'page_manager', 'plugins/tasks/node_edit');
      return page_manager_node_edit($node);
    }
  }
}

/**
 * Page callback that either returns the normal create page or a clone page.
 *
 * Checks the 'Space type' taxonomy to see if this is a clone type or a normal
 * type and returns either the normal page from 'oa_clone' or the clone page
 * from 'clone'.
 *
 * @param string $type
 *   The node content type name (ie. oa_space, oa_section).
 * @param integer $space_tid
 *   The taxonomy term ID of the 'Space type'.
 *
 * @see oa_core_create_space_page_callback()
 * @see oa_clone_node_prepopulate()
 */
function oa_clone_create_space_page_callback($type, $space_tid) {
  if ($space_type = taxonomy_term_load($space_tid)) {
    // If this is a clone type, then return oa_clone_node_prepopulate().
    $wrapper = entity_metadata_wrapper('taxonomy_term', $space_type);
    if ($wrapper->field_oa_clone_enabled->value() && ($node = $wrapper->field_oa_clone_space->value())) {
      drupal_set_title(t('Create @name Space', array('@name' => $space_type->name)));
      return oa_clone_node_prepopulate($node, FALSE);
    }

    // Otherwise, we fallback on oa_core_create_space_page_callback().
    return oa_core_create_space_page_callback($type, $space_tid);
  }

  return MENU_NOT_FOUND;
}

/**
 * Implements hook_permision().
 */
function oa_clone_permission() {
  return array(
    'clone node in any group' => array(
      'title' => t('Clone any node in any group'),
      'description' => t('The <em>Clone any node</em> permission only affects nodes that are not in an Organic Group - this permission affects nodes in Organic Groups.'),
    ),
    'clone own nodes in any group' => array(
      'title' => t('Clone own content in any group'),
      'description' => t('The <em>Clone own nodes</em> permission only affects nodes that are not in an Organic Group - this permission affects nodes in Organic Groups.'),
    ),
  );
}

/**
 * Implements hook_og_permission().
 */
function oa_clone_og_permission() {
  return array(
    'clone node' => array(
      'title' => t('Clone any content in this Space'),
      'default role' => array(OG_ADMINISTRATOR_ROLE),
    ),
    'clone own nodes' => array(
      'title' => t('Clone own content in this Space'),
      'default role' => array(OG_ADMINISTRATOR_ROLE),
    ),
  );
}

/**
 * Implements hook_clone_access().
 */
function oa_clone_clone_access_alter(&$access, $node) {
  global $user;

  // We only affect the access of group content types, but we completely take
  // over the access for those nodes.
  if (og_is_group_content_type('node', $node->type) && clone_is_permitted($node->type)) {
    // Make sure that this user has permission to view this node and create
    // content of the same type.
    if (!node_access('view', $node) || !node_access('create', $node->type)) {
      $access = FALSE;
      return;
    }

    $own_node = $user->uid && ($node->uid == $user->uid);

    // Next, we check the global Drupal permissions.
    if (user_access('clone node in any group') || ($own_node && user_access('clone own nodes in any group'))) {
      $access = TRUE;
      return;
    }

    // Finally, we check the group permissions.
    $gid = oa_core_get_group_from_node($node->nid);
    $access = og_user_access('node', $gid, 'clone node') || ($own_node && og_user_access('node', $gid, 'clone own nodes'));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function oa_clone_form_oa_space_node_form_alter(&$form, &$form_state, &$form_id) {
  $form['field_oa_space_type'][LANGUAGE_NONE]['#description'] = t('Changing the <em>Space type</em> after the Space has already been created, will only affect the default dashboard layout and available types - not content or configuration.');
}

/**
 * Implements hook_clone_node_alter().
 */
function oa_clone_clone_node_alter(&$node, $context) {
  // At the moment we don't have much generic that affects all cloning
  // operations. In general, you shouldn't put things here, but rather in the
  // module that is responible for the thing you are adding support for.
  // For example, sandbox support is done in oa_sandbox.

  $original_node = $context['original_node'];
  if (!empty($original_node->oa_clone_skip)) {
    $node->oa_clone_skip = TRUE;
  }
}

/**
 * Clones a node using the 'clone' module.
 *
 * @param object $original_node
 *   The node object that we are cloning.
 * @param object $account
 *   (Optional) The user object to be the author of the node.
 *
 * @return object
 *   The new node object that was created.
 */
function oa_clone($original_node, $account = NULL) {
  module_load_include('inc', 'clone', 'clone.pages');
  $node = _clone_node_prepare($original_node, FALSE, $account);
  $context = array('method' => 'save-edit', 'original_node' => $original_node);
  drupal_alter('clone_node', $node, $context);
  return $node;
}

/**
 * Save a cloned node, invoking Rules if necessary.
 *
 * @param object $node
 *   The node object that will be saved.
 */
function oa_clone_save($node) {
  node_save($node);
  if (module_exists('rules')) {
    rules_invoke_event('clone_node', $node, $original_node);
  }
}

/**
 * Gets all the content within a particular Section.
 *
 * @param int $nid
 *   The node ID of the Section.
 *
 * @return array
 *   An array of node IDs.
 */
function oa_clone_get_section_content($nid) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->fieldCondition('oa_section_ref', 'target_id', $nid);
  $result = $query->execute();
  if (isset($result['node'])) {
    return array_keys($result['node']);
  }
  return array();
}

/**
 * Implements hook_entity_insert().
 */
function oa_clone_node_insert($node) {
  if (in_array($node->type, array('oa_section', 'oa_space', 'oa_group')) && !empty($node->clone_from_original_nid) && empty($node->oa_clone_skip)) {
    $original_nid = $node->clone_from_original_nid;

    $batch = array(
      'title' => t('Cloning content...'),
      'operations' => array(),
      'finished' => 'oa_clone_batch_finished',
    );

    switch ($node->type) {
      case 'oa_section':
        $batch['operations'][] = array('oa_clone_batch_clone_section_content', array($node, $original_nid));
        break;

      case 'oa_space':
        // TODO: Find all the sections in this Space and clone them.
        //       Use oa_core_space_sections($gid);
        // TODO: Find all the sub-spaces in this Space and clone them.
        // TODO: Find all non-section / non-sub-space content in this Space and clone it.
        break;

      case 'oa_group':
        // TODO: clone all the user memberships in this group.
        break;
    }

    batch_set($batch);
  }
}

/**
 * Callback for cloning all the content in a section.
 *
 * @param object $node
 *   Node object representing the Section we are going to popuplate.
 * @param int $original_nid
 *   The node ID of the original Section we are cloning data from.
 * @param array &$context
 *   A place where we can store values that need to b passed from one iteration
 *   of this batch operation to the next.
 */
function oa_clone_batch_clone_section_content($node, $original_nid, &$context) {
  // The first time through, set up all the variables.
  if (empty($context['sandbox']['max'])) {
    $context['sandbox']['content_ids'] = oa_clone_get_section_content($original_nid);
    $context['sandbox']['max'] = count($context['sandbox']['content_ids']);
    $context['sandbox']['nid'] = $node->nid;
    $context['sandbox']['progress'] = 0;
    $context['results']['total'] = (!empty($context['results']['total']) ? $context['results']['total'] : 0) + $context['sandbox']['max'];

  }

  // Get the next node.
  $next_id = array_shift($context['sandbox']['content_ids']);
  if (!$next_id) {
    $context['sandbox']['finished'] = TRUE;
    return;
  }

  // Get the original node and mark it so that it doesn't get cloned again.
  $original_node = node_load($next_id);
  $original_node->oa_clone_skip = TRUE;

  // Clone it, setting to the new Space and Section.
  $clone = oa_clone($original_node);
  $clone->oa_group_ref[LANGUAGE_NONE][0]['target_id'] = $node->oa_group_ref[LANGUAGE_NONE][0]['target_id'];
  $clone->oa_section_ref[LANGUAGE_NONE][0]['target_id'] = $node->nid;
  oa_clone_save($clone);

  // Bump the progress indicator.
  $context['sandbox']['progress']++;

  // Report progress if not finished and run again.
  $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
}

/**
 * Callback for when cloning batch finishes.
 */
function oa_clone_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Finished cloning @num_ids peices of content successfully.', array('@num_ids' => $results['total'])));
  }
  else {
    drupal_set_message(t('Error cloning content.'), 'error');
  }
}
